#include "i2c.h"

int fd;

/*
 * Inititial the I2C with specific address
 * 
 * @param addr the address of the I2C device
 * @return the file descriptor of where you can access the device
 */
int _initI2C_(uint16_t addr) {
  fd = wiringPiI2CSetup(addr);

  return fd;
}

/*
 * Read an unsigned 8-bits integer
 * 
 * @param addr the address where the data is stored
 * @return the value that stored in addr
 */
uint8_t readU8(uint16_t addr) {
  return (uint8_t)wiringPiI2CReadReg8(fd, addr);
}

/*
 * Read a signed 8-bits integer
 *
 * @param addr the address where the data is stored
 * @return the value that stored in addr
 */
int8_t readS8(uint16_t addr) {
  int8_t result = readU8(addr);
  if (result > 127)
    return result - 256;
  else
    return result;
}

/*
 * Read an unsigned 16-bits integer
 *
 * @param addr the address where the data is stored
 * @return the value that stored in addr
 */
uint16_t readU16(uint16_t addr) {
  uint8_t hi_byte = readU8(addr);
  uint16_t result = (hi_byte << 8) + readU8(addr + 1);
  return result;
}

/*
 * Read a signed 16-bits integer
 *
 * @param addr the address where the data is stored
 * @return the value that stored in addr
 */
int16_t readS16(uint16_t addr) {
  uint8_t hi_byte = readU8(addr);
  if (hi_byte > 127)
    hi_byte -= 256;
  int16_t result = (hi_byte << 8) + readU8(addr + 1);
  return result;
}

/*
 * Write an 8-bits data to address addr
 *
 * @param addr the address to write to
 * @param data the data to be written
 * @return 
 */
int write8(int addr, int data) {
  return wiringPiI2CWriteReg8(fd, addr, data);
}
